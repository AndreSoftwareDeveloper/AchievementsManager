{"version":3,"file":"psn-api.cjs.production.min.js","sources":["../src/authenticate/AUTH_BASE_URL.ts","../src/models/trophy-rarity.model.ts","../src/authenticate/exchangeCodeForAccessToken.ts","../src/authenticate/exchangeNpssoForCode.ts","../src/authenticate/exchangeRefreshTokenForAuthTokens.ts","../src/utils/buildRequestUrl.ts","../src/utils/call.ts","../src/search/makeUniversalSearch.ts","../src/search/SEARCH_BASE_URL.ts","../src/trophy/TROPHY_BASE_URL.ts","../src/trophy/title/getTitleTrophies.ts","../src/trophy/title/getTitleTrophyGroups.ts","../src/trophy/user/getUserTitles.ts","../src/trophy/user/getUserTrophiesEarnedForTitle.ts","../src/trophy/user/getUserTrophyGroupEarningsForTitle.ts","../src/trophy/user/getUserTrophyProfileSummary.ts","../src/user/USER_BASE_URL.ts","../src/user/getProfileFromAccountId.ts","../src/user/getProfileFromUserName.ts","../src/user/getUserFriendsAccountIds.ts"],"sourcesContent":["export const AUTH_BASE_URL = \"https://ca.account.sony.com/api/authz/v3/oauth\";\n","export enum TrophyRarity {\n  UltraRare,\n  VeryRare,\n  Rare,\n  Common\n}\n","import fetch from \"isomorphic-unfetch\";\n\nimport type { AuthTokensResponse } from \"../models\";\nimport { AUTH_BASE_URL } from \"./AUTH_BASE_URL\";\n\n/**\n * @param accessCode Your access code, typically retrieved by using `exchangeNpssoForCode()`.\n * @returns An object containing an access token, refresh token, and expiry times for both.\n */\nexport const exchangeCodeForAccessToken = async (\n  accessCode: string\n): Promise<AuthTokensResponse> => {\n  const requestUrl = `${AUTH_BASE_URL}/token`;\n\n  const res = await fetch(requestUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Authorization:\n        \"Basic MDk1MTUxNTktNzIzNy00MzcwLTliNDAtMzgwNmU2N2MwODkxOnVjUGprYTV0bnRCMktxc1A=\"\n    },\n    body: new URLSearchParams({\n      code: accessCode,\n      redirect_uri: \"com.scee.psxandroid.scecompcall://redirect\",\n      grant_type: \"authorization_code\",\n      token_format: \"jwt\"\n    }).toString()\n  });\n\n  const raw = await res.json();\n\n  return {\n    accessToken: raw.access_token,\n    expiresIn: raw.expires_in,\n    idToken: raw.id_token,\n    refreshToken: raw.refresh_token,\n    refreshTokenExpiresIn: raw.refresh_token_expires_in,\n    scope: raw.scope,\n    tokenType: raw.token_type\n  };\n};\n","import fetch from \"isomorphic-unfetch\";\n\nimport { AUTH_BASE_URL } from \"./AUTH_BASE_URL\";\n\n/**\n *\n * @param npssoToken Your NPSSO token, retrieved from https://ca.account.sony.com/api/v1/ssocookie\n * @returns An access code, which can be exchanged for an access token using `exchangeCodeForAccessToken`.\n * @example\n * ```ts\n * const code = await exchangeNpssoForCode(\"myNpssoToken\");\n *\n * console.log(code) // --> \"v3.XXXXXX\"\n * ```\n */\nexport const exchangeNpssoForCode = async (\n  npssoToken: string\n): Promise<string> => {\n  const queryString = new URLSearchParams({\n    access_type: \"offline\",\n    client_id: \"09515159-7237-4370-9b40-3806e67c0891\",\n    redirect_uri: \"com.scee.psxandroid.scecompcall://redirect\",\n    response_type: \"code\",\n    scope: \"psn:mobile.v2.core psn:clientapp\"\n  }).toString();\n\n  const requestUrl = `${AUTH_BASE_URL}/authorize?${queryString}`;\n\n  // This never returns a 200. As of Oct 10 2021, it seems to return a 302.\n  const { headers: responseHeaders } = await fetch(requestUrl, {\n    headers: {\n      Cookie: `npsso=${npssoToken}`\n    },\n    redirect: \"manual\"\n  });\n\n  // The access code itself is stored in a header on the response.\n  // We'll perform a few validations to ensure it's actually there.\n  if (\n    !responseHeaders.has(\"location\") ||\n    !responseHeaders.get(\"location\")?.includes(\"?code=\")\n  ) {\n    throw new Error(`\n      There was a problem retrieving your PSN access code. Is your NPSSO code valid?\n      To get a new NPSSO code, visit https://ca.account.sony.com/api/v1/ssocookie.\n    `);\n  }\n\n  const redirectLocation = responseHeaders.get(\"location\") as string;\n  const redirectParams = new URLSearchParams(\n    redirectLocation.split(\"redirect/\")[1]\n  );\n\n  return redirectParams.get(\"code\") as string;\n};\n","import fetch from \"isomorphic-unfetch\";\n\nimport type { AuthTokensResponse } from \"../models\";\nimport { AUTH_BASE_URL } from \"./AUTH_BASE_URL\";\n\nexport const exchangeRefreshTokenForAuthTokens = async (\n  refreshToken: string\n): Promise<AuthTokensResponse> => {\n  const requestUrl = `${AUTH_BASE_URL}/token`;\n\n  const res = await fetch(requestUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Authorization:\n        \"Basic MDk1MTUxNTktNzIzNy00MzcwLTliNDAtMzgwNmU2N2MwODkxOnVjUGprYTV0bnRCMktxc1A=\"\n    },\n    body: new URLSearchParams({\n      refresh_token: refreshToken,\n      grant_type: \"refresh_token\",\n      token_format: \"jwt\",\n      scope: \"psn:mobile.v2.core psn:clientapp\"\n    }).toString()\n  });\n\n  const raw = await res.json();\n\n  return {\n    accessToken: raw.access_token,\n    expiresIn: raw.expires_in,\n    idToken: raw.id_token,\n    refreshToken: raw.refresh_token,\n    refreshTokenExpiresIn: raw.refresh_token_expires_in,\n    scope: raw.scope,\n    tokenType: raw.token_type\n  };\n};\n","import type { AllCallOptions } from \"../models\";\n\nexport const buildRequestUrl = (\n  baseUrl: string,\n  endpointUrl: string,\n  options: Partial<AllCallOptions> = {},\n  args: Record<string, string | number> = {}\n) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- This is an intentional pick.\n  const { headerOverrides, ...pickedOptions } = options;\n\n  const concatenated = `${baseUrl}/${endpointUrl}`;\n  const withoutDoubleSlashes = concatenated.replace(/([^:]\\/)\\/+/g, \"$1\");\n\n  let withArgs = withoutDoubleSlashes;\n  const queryParamValues: Record<string, string> = {};\n\n  for (const [argKey, argValue] of Object.entries({\n    ...args,\n    ...pickedOptions\n  })) {\n    if (withArgs.includes(`:${argKey}`)) {\n      withArgs = withArgs.replace(`:${argKey}`, String(argValue));\n    } else if (argValue !== undefined) {\n      queryParamValues[argKey] = String(argValue);\n    }\n  }\n\n  const queryString = new URLSearchParams(queryParamValues).toString();\n  return queryString.length > 0 ? `${withArgs}?${queryString}` : withArgs;\n};\n","import fetch from \"isomorphic-unfetch\";\n\nimport type { AuthorizationPayload, CallValidHeaders } from \"../models\";\n\nexport const call = async <T>(\n  config: {\n    url: string;\n    method?: \"GET\" | \"POST\";\n    headers?: CallValidHeaders;\n  },\n  authorization: AuthorizationPayload,\n  bodyPayload?: Record<string, any>\n) => {\n  const response = await fetch(config.url, {\n    method: config?.method ?? \"GET\",\n    headers: {\n      Authorization: `Bearer ${authorization.accessToken}`,\n      \"Content-Type\": \"application/json\",\n      ...config?.headers\n    },\n    body: JSON.stringify(bodyPayload)\n  });\n\n  return (await response.json()) as T;\n};\n","import type {\n  AuthorizationPayload,\n  SocialAccountResult,\n  UniversalSearchDomains,\n  UniversalSearchResponse\n} from \"../models\";\nimport { buildRequestUrl } from \"../utils/buildRequestUrl\";\nimport { call } from \"../utils/call\";\nimport { SEARCH_BASE_URL } from \"./SEARCH_BASE_URL\";\n\nexport const makeUniversalSearch = async <R extends UniversalSearchDomains>(\n  authorization: AuthorizationPayload,\n  searchTerm: string,\n  domain: R\n) => {\n  const url = buildRequestUrl(SEARCH_BASE_URL, \"/v1/universalSearch\");\n\n  type AssertType<R> = R extends \"SocialAllAccounts\"\n    ? SocialAccountResult\n    : unknown;\n\n  return await call<UniversalSearchResponse<AssertType<typeof domain>>>(\n    { url, method: \"POST\" },\n    authorization,\n    {\n      searchTerm,\n      domainRequests: [\n        {\n          domain\n        }\n      ]\n    }\n  );\n};\n","export const SEARCH_BASE_URL = \"https://m.np.playstation.com/api/search\";\n","export const TROPHY_BASE_URL = \"https://m.np.playstation.com/api/trophy\";\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  TitleTrophiesResponse\n} from \"../../models\";\nimport { buildRequestUrl } from \"../../utils/buildRequestUrl\";\nimport { call } from \"../../utils/call\";\nimport { TROPHY_BASE_URL } from \"../TROPHY_BASE_URL\";\n\ntype GetTitleTrophiesOptions = Pick<\n  AllCallOptions,\n  \"headerOverrides\" | \"limit\" | \"npServiceName\" | \"offset\"\n>;\n\n/**\n * A call to this function will retrieve the trophy list of a\n * single - or all - trophy groups for a title. A title can have multiple\n * groups of trophies (a `\"default\"` group which all titles have, and additional\n * groups starting with the name `\"001\"` and incrementing for each additional group). To retrieve\n * trophies from all groups within a title (ie. the full trophy set), then\n * `trophyGroupId` should be set to `\"all\"`.\n *\n * When the title platform is PS3, PS4 or PS Vita you __must__ specify the\n * `npServiceName` parameter as `\"trophy\"`.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeCodeForAccessToken()`.\n * @param npCommunicationId Unique ID of the title.\n * @param trophyGroupId `\"all\"` to return all trophies for the title, otherwise restrict results to a specific trophy group (such as a DLC).\n * @param options.npServiceName `\"trophy\"` for PS3, PS4, or PS Vita platforms. `\"trophy2\"` for the PS5 platform.\n * @param options.limit Limit the number of trophies returned.\n * @param options.offset Return trophy data from this result onwards.\n * @param options.headerOverrides Override the headers in the request to the PSN API, such as to change the language.\n */\nexport const getTitleTrophies = async (\n  authorization: AuthorizationPayload,\n  npCommunicationId: string,\n  trophyGroupId: string,\n  options?: Partial<GetTitleTrophiesOptions>\n): Promise<TitleTrophiesResponse> => {\n  const url = buildRequestUrl(\n    TROPHY_BASE_URL,\n    \"/v1/npCommunicationIds/:npCommunicationId/trophyGroups/:trophyGroupId/trophies\",\n    options,\n    { npCommunicationId, trophyGroupId }\n  );\n\n  return await call<TitleTrophiesResponse>(\n    { url, headers: options?.headerOverrides },\n    authorization\n  );\n};\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  TitleTrophyGroupsResponse\n} from \"../../models\";\nimport { buildRequestUrl } from \"../../utils/buildRequestUrl\";\nimport { call } from \"../../utils/call\";\nimport { TROPHY_BASE_URL } from \"../TROPHY_BASE_URL\";\n\ntype GetTitleTrophyGroupsOptions = Pick<\n  AllCallOptions,\n  \"npServiceName\" | \"headerOverrides\"\n>;\n\n/**\n * A title may have multiple groups of trophies. This is most commonly\n * seen in games which have DLC expansions where additional trophies are added.\n *\n * You can call this function for a specific title - using the\n * unique `npCommunicationId` for the title - and you will receive a\n * summary of all of the trophy groups associated with the title.\n * This also includes a summary of the number of trophies for the\n * title, broken down by group and grade (gold, silver, etc.).\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeCodeForAccessToken()`.\n * @param npCommunicationId The unique ID of the game title you wish to retrieve the trophy groups list for.\n * @param options.npServiceName `\"trophy\"` for PS3, PS4, or PS Vita platforms. `\"trophy2\"` for the PS5 platform.\n * @param options.headerOverrides Override the headers in the request to the PSN API, such as to change the language.\n */\nexport const getTitleTrophyGroups = async (\n  authorization: AuthorizationPayload,\n  npCommunicationId: string,\n  options?: Partial<GetTitleTrophyGroupsOptions>\n): Promise<TitleTrophyGroupsResponse> => {\n  const url = buildRequestUrl(\n    TROPHY_BASE_URL,\n    \"/v1/npCommunicationIds/:npCommunicationId/trophyGroups\",\n    options,\n    { npCommunicationId }\n  );\n\n  return await call<TitleTrophyGroupsResponse>(\n    { url, headers: options?.headerOverrides },\n    authorization\n  );\n};\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  UserTitlesResponse\n} from \"../../models\";\nimport { buildRequestUrl } from \"../../utils/buildRequestUrl\";\nimport { call } from \"../../utils/call\";\nimport { TROPHY_BASE_URL } from \"../TROPHY_BASE_URL\";\n\ntype GetUserTitlesOptions = Pick<\n  AllCallOptions,\n  \"headerOverrides\" | \"limit\" | \"offset\"\n>;\n\n/**\n * A call to this function will retrieve the earned status of trophies for a user\n * from either a single - or all - trophy groups in a title. A title can have\n * multiple groups of trophies (a `\"default\"` group which all titles have, and\n * additional groups starting with a name of `\"001\"` and incrementing for each\n * additional group). To retrieve trophies from all groups within a title\n * (ie. the full trophy set), `trophyGroupId` should be set to `\"all\"`.\n *\n * The numeric `accountId` can be that of any PSN account for which the authenticating\n * account has permissions to view the trophy list. When querying the titles\n * associated with the authenticating account, the numeric `accountId` can be\n * substituted with `\"me\"`.\n *\n * To find a user's `accountId`, the `makeUniversalSearch()` function can be used.\n *\n * Included in the information returned is the titles' unique `npCommunicationId`.\n * This is required to make use of subsequent functions for requesting more specific\n * detail about a title's trophies.\n *\n * The results are presented in order of the `lastUpdatedDateTime` for the title,\n * so the first result will be the title for which a trophy was most recently earned\n * (or synced for the first time in the case of a game with 0% progress).\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeCodeForAccessToken()`.\n * @param accountId The account whose trophy list is being accessed. Use `\"me\"` for the authenticating account.\n * @param options.limit Limit the number of titles returned.\n * @param options.offset Return title data from this result onwards.\n * @param options.headerOverrides Override the headers in the request to the PSN API, such as to change the language.\n */\nexport const getUserTitles = async (\n  authorization: AuthorizationPayload,\n  accountId: string,\n  options?: Partial<GetUserTitlesOptions>\n): Promise<UserTitlesResponse> => {\n  const url = buildRequestUrl(\n    TROPHY_BASE_URL,\n    \"/v1/users/:accountId/trophyTitles\",\n    options,\n    { accountId }\n  );\n\n  return await call<UserTitlesResponse>(\n    { url, headers: options?.headerOverrides },\n    authorization\n  );\n};\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  UserTrophiesEarnedForTitleResponse\n} from \"../../models\";\nimport { buildRequestUrl } from \"../../utils/buildRequestUrl\";\nimport { call } from \"../../utils/call\";\nimport { TROPHY_BASE_URL } from \"../TROPHY_BASE_URL\";\n\ntype GetUserTrophiesEarnedForTitleOptions = Pick<\n  AllCallOptions,\n  \"offset\" | \"npServiceName\" | \"limit\" | \"headerOverrides\"\n>;\n\n/**\n * A call to this function will retrieve the earned status of trophies for a user\n * from either a single - or all - trophy groups in a title. A title can have\n * multiple groups of trophies (a `\"default\"` group which all titles have, and\n * additional groups starting with a name of `\"001\"` and incrementing for each\n * additional group). To retrieve trophies from all groups within a title\n * (ie. the full trophy set), then `trophyGroupId` should be set to `\"all\"`.\n *\n * The numeric `accountId` can be that of any PSN account for which the\n * authenticating account has permissions to view the trophy list.\n * When querying the titles associated with the authenticating account, the\n * numeric `accountId` can be substituted with `\"me\"`.\n *\n * To find a user's `accountId`, the `makeUniversalSearch()` function can be used.\n *\n * This function returns the earned status of the\n * trophy only and no additional descriptive metadata (ie. trophy name,\n * trophy description). Use `getTitleTrophies()` to obtain this information.\n *\n * When the title platform is PS3, PS4, or PS Vita, you __must__ specify the\n * `npServiceName` option as `\"trophy\"`.\n *\n * If you attempt to query a title which the user does not have associated\n * with their account (ie. the title has not been launched and allowed to\n * sync at least once) then a Resource Not Found error will be thrown.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeCodeForAccessToken()`.\n * @param accountId The account whose trophy list is being accessed. Use `\"me\"` for the authenticating account.\n * @param npCommunicationId Unique ID of the title.\n * @param trophyGroupId `\"all\"` to return all trophies for the title, otherwise restrict results to a specific trophy group (such as a DLC).\n * @param options.npServiceName `\"trophy\"` for PS3, PS4, or PS Vita platforms. `\"trophy2\"` for the PS5 platform.\n * @param options.limit Limit the number of trophies returned.\n * @param options.offset Return trophy data from this result onwards.\n * @param options.headerOverrides Override the headers in the request to the PSN API, such as to change the language.\n */\nexport const getUserTrophiesEarnedForTitle = async (\n  authorization: AuthorizationPayload,\n  accountId: string,\n  npCommunicationId: string,\n  trophyGroupId: string,\n  options?: Partial<GetUserTrophiesEarnedForTitleOptions>\n): Promise<UserTrophiesEarnedForTitleResponse> => {\n  const url = buildRequestUrl(\n    TROPHY_BASE_URL,\n    \"/v1/users/:accountId/npCommunicationIds/:npCommunicationId/trophyGroups/:trophyGroupId/trophies\",\n    options,\n    { accountId, npCommunicationId, trophyGroupId }\n  );\n\n  const response = await call<UserTrophiesEarnedForTitleResponse>(\n    { url, headers: options?.headerOverrides },\n    authorization\n  );\n\n  if ((response as any)?.error) {\n    throw new Error((response as any)?.error?.message ?? \"Unexpected Error\");\n  }\n\n  return response;\n};\n","import type {\n  AuthorizationPayload,\n  CallValidHeaders,\n  UserTrophyGroupEarningsForTitleResponse\n} from \"../../models\";\nimport { buildRequestUrl } from \"../../utils/buildRequestUrl\";\nimport { call } from \"../../utils/call\";\nimport { TROPHY_BASE_URL } from \"../TROPHY_BASE_URL\";\n\ninterface GetUserTrophyGroupEarningsForTitleOptions {\n  /**\n   * Not required unless the platform is PS3, PS4, or PS Vita.\n   * If one of these platforms, the value __must__ be `\"trophy\"`.\n   *\n   * `\"trophy\"` for PS3, PS4, or PS Vita platforms.\n   * `\"trophy2\"` for the PS5 platform.\n   */\n  npServiceName: \"trophy\" | \"trophy2\";\n\n  /*\n   * Override the headers in the request to the PSN API,\n   * such as to change the language.\n   */\n  headerOverrides: CallValidHeaders;\n}\n\n/**\n * A request to this endpoint function will retrieve a summary of the trophies earned for\n * a user broken down by trophy group within a title. A title can have\n * multiple groups of trophies (a `\"default\"` group which all titles have,\n * and additional groups beginning with the name `\"001\"` and incrementing for\n * each additional group).\n *\n * The numeric `accountId` can be that of any PSN account for which the\n * authenticating account has permissions to view the trophy list.\n * When querying the titles associated with the authenticating account, the\n * numeric `accountId` can be substituted with `\"me\"`.\n *\n * To find a user's `accountId`, the `makeUniversalSearch()` function can be used.\n *\n * This function calls an endpoint that returns the earned status of the\n * trophy only and no additional descriptive metadata (ie. trophy name,\n * trophy description). Use `getTitleTrophies()` to obtain this information.\n *\n *  When the title platform is PS3, PS4 or PS Vita you __must__ specify the\n * `npServiceName` option as `\"trophy\"`.\n *\n * If you attempt to query a title which the user does not have associated\n * with their account (ie. the title has not been launched and allowed to\n * sync at least once) then a Resource Not Found error will be thrown.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeCodeForAccessToken()`.\n * @param accountId The account whose trophy list is being accessed. Use `\"me\"` for the authenticating account.\n * @param npCommunicationId Unique ID of the title.\n * @param options.npServiceName `\"trophy\"` for PS3, PS4, or PS Vita platforms. `\"trophy2\"` for the PS5 platform.\n * @param options.headerOverrides Override the headers in the request to the PSN API, such as to change the language.\n */\nexport const getUserTrophyGroupEarningsForTitle = async (\n  authorization: AuthorizationPayload,\n  accountId: string,\n  npCommunicationId: string,\n  options?: Partial<GetUserTrophyGroupEarningsForTitleOptions>\n): Promise<UserTrophyGroupEarningsForTitleResponse> => {\n  const url = buildRequestUrl(\n    TROPHY_BASE_URL,\n    \"/v1/users/:accountId/npCommunicationIds/:npCommunicationId/trophyGroups\",\n    options,\n    { accountId, npCommunicationId }\n  );\n\n  const response = await call<UserTrophyGroupEarningsForTitleResponse>(\n    { url, headers: options?.headerOverrides },\n    authorization\n  );\n\n  if ((response as any)?.error) {\n    throw new Error((response as any)?.error?.message ?? \"Unexpected Error\");\n  }\n\n  return response;\n};\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  UserTrophyProfileSummaryResponse\n} from \"../../models\";\nimport { buildRequestUrl } from \"../../utils/buildRequestUrl\";\nimport { call } from \"../../utils/call\";\nimport { TROPHY_BASE_URL } from \"../TROPHY_BASE_URL\";\n\ntype GetUserTrophyProfileSummaryOptions = Pick<\n  AllCallOptions,\n  \"headerOverrides\"\n>;\n\n/**\n * A call to this function will retrieve an overall summary of the number of\n * trophies earned for a user broken down by grade, as well as their current\n * overall trophy level, progress towards the next level, and which tier their\n * current level falls in to. The tiers are based on the [level changes introduced in 2020](https://andshrew.github.io/PlayStation-Trophies/images/psn-trophy-tiers.png).\n *\n * The numeric `accountId` can be that of any PSN account for which the\n * authenticating account has permissions to view the trophy list.\n * When querying the titles associated with the authenticating account, the\n * numeric `accountId` can be substituted with `\"me\"`.\n *\n * To find a user's `accountId`, the `makeUniversalSearch()` function can be used.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeCodeForAccessToken()`.\n * @param accountId The account whose trophy list is being accessed. Use `\"me\"` for the authenticating account.\n * @param options.headerOverrides Override the headers in the request to the PSN API, such as to change the language.\n */\nexport const getUserTrophyProfileSummary = async (\n  authorization: AuthorizationPayload,\n  accountId: string,\n  options?: Partial<GetUserTrophyProfileSummaryOptions>\n): Promise<UserTrophyProfileSummaryResponse> => {\n  const url = buildRequestUrl(\n    TROPHY_BASE_URL,\n    \"/v1/users/:accountId/trophySummary\",\n    options,\n    { accountId }\n  );\n\n  return await call<UserTrophyProfileSummaryResponse>(\n    { url, headers: options?.headerOverrides },\n    authorization\n  );\n};\n","export const USER_BASE_URL =\n  \"https://m.np.playstation.com/api/userProfile/v1/internal/users\";\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  ProfileFromAccountIdResponse\n} from \"../models\";\nimport { buildRequestUrl } from \"../utils/buildRequestUrl\";\nimport { call } from \"../utils/call\";\nimport { USER_BASE_URL } from \"./USER_BASE_URL\";\n\ntype GetProfileFromAccountIdOptions = Pick<AllCallOptions, \"headerOverrides\">;\n\n/**\n * A call to this function will retrieve some profile information of the accountId being requested.\n * If the account's profile cannot be found (either due to non-existence or privacy settings),\n * an error will be thrown.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeCodeForAccessToken()`.\n * @param accountId The accountId for the user you wish to retrieve a profile for.\n */\nexport const getProfileFromAccountId = async (\n  authorization: AuthorizationPayload,\n  accountId: string,\n  options?: GetProfileFromAccountIdOptions\n): Promise<ProfileFromAccountIdResponse> => {\n  const url = buildRequestUrl(USER_BASE_URL, \"/:accountId/profiles\", options, {\n    accountId\n  });\n  const response = await call<ProfileFromAccountIdResponse>(\n    { url },\n    authorization\n  );\n\n  if ((response as any)?.error) {\n    throw new Error((response as any)?.error?.message ?? \"Unexpected Error\");\n  }\n\n  return response;\n};\n","import type {\n  AuthorizationPayload,\n  ProfileFromUserNameResponse\n} from \"../models\";\nimport { call } from \"../utils/call\";\n\n/**\n * A call to this function will retrieve the profile of the username being requested.\n * If the user cannot be found (either due to non-existence or privacy settings),\n * an error will be thrown.\n *\n * This is a legacy API endpoint function. If you are just trying to get a user's\n * account ID, [`makeUniversalSearch()`](https://psn-api.achievements.app/api-docs/universal-search#makeuniversalsearch)\n * is recommended instead. This endpoint is here because it can return interesting\n * presence information when the user is playing on a legacy console such as a PS3.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeCodeForAccessToken()`.\n * @param userName The username for the user you wish to retrieve a profile for.\n */\nexport const getProfileFromUserName = async (\n  authorization: AuthorizationPayload,\n  userName: string\n): Promise<ProfileFromUserNameResponse> => {\n  const url = `https://us-prof.np.community.playstation.net/userProfile/v1/users/${userName}/profile2?fields=npId,onlineId,accountId,avatarUrls,plus,aboutMe,languagesUsed,trophySummary(@default,level,progress,earnedTrophies),isOfficiallyVerified,personalDetail(@default,profilePictureUrls),personalDetailSharing,personalDetailSharingRequestMessageFlag,primaryOnlineStatus,presences(@default,@titleInfo,platform,lastOnlineDate,hasBroadcastData),requestMessageFlag,blocking,friendRelation,following,consoleAvailability`;\n\n  const response = await call<ProfileFromUserNameResponse>(\n    { url },\n    authorization\n  );\n\n  if ((response as any)?.error) {\n    throw new Error((response as any)?.error?.message ?? \"Unexpected Error\");\n  }\n\n  return response;\n};\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  GetUserFriendsAccountIdsResponse\n} from \"../models\";\nimport { buildRequestUrl } from \"../utils/buildRequestUrl\";\nimport { call } from \"../utils/call\";\nimport { USER_BASE_URL } from \"./USER_BASE_URL\";\n\ntype GetUserFriendsAccountIdsOptions = Pick<AllCallOptions, \"limit\" | \"offset\">;\n\n/**\n * A call to this function will retrieve the list of friended `accountId` values\n * associated with the given `accountId` parameter. If the user cannot be found\n * (either due to non-existence or privacy settings), an error will be thrown.\n *\n *  To find a user's `accountId`, the `makeUniversalSearch()` function can be used.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeCodeForAccessToken()`.\n * @param accountId The account whose trophy list is being accessed. Use `\"me\"` for the authenticating account.\n */\nexport const getUserFriendsAccountIds = async (\n  authorization: AuthorizationPayload,\n  accountId: string,\n  options?: Partial<GetUserFriendsAccountIdsOptions>\n): Promise<GetUserFriendsAccountIdsResponse> => {\n  const url = buildRequestUrl(USER_BASE_URL, \"/:accountId/friends\", options, {\n    accountId\n  });\n\n  const response = await call<GetUserFriendsAccountIdsResponse>(\n    { url },\n    authorization\n  );\n\n  // If you are unable to access the user's friends list, a\n  // \"Not permitted by access control\" error will be thrown.\n  if ((response as any)?.error) {\n    throw new Error((response as any)?.error?.message ?? \"Unexpected Error\");\n  }\n\n  return response;\n};\n"],"names":["TrophyRarity","exchangeCodeForAccessToken","_ref","_asyncToGenerator","_regeneratorRuntime","mark","accessCode","res","raw","wrap","_context","prev","next","fetch","AUTH_BASE_URL","method","headers","Authorization","body","URLSearchParams","code","redirect_uri","grant_type","token_format","toString","sent","json","abrupt","accessToken","access_token","expiresIn","expires_in","idToken","id_token","refreshToken","refresh_token","refreshTokenExpiresIn","refresh_token_expires_in","scope","tokenType","token_type","stop","_callee","_x","apply","this","arguments","exchangeNpssoForCode","npssoToken","_responseHeaders$get","queryString","requestUrl","responseHeaders","redirectLocation","redirectParams","access_type","client_id","response_type","Cookie","redirect","has","get","includes","Error","split","exchangeRefreshTokenForAuthTokens","buildRequestUrl","baseUrl","endpointUrl","options","args","pickedOptions","_objectWithoutPropertiesLoose","_excluded","withArgs","replace","queryParamValues","Object","entries","_extends","_i","_Object$entries","length","_Object$entries$_i","argKey","argValue","String","undefined","call","config","authorization","bodyPayload","_config$method","response","url","JSON","stringify","_x2","_x3","makeUniversalSearch","searchTerm","domain","domainRequests","TROPHY_BASE_URL","getTitleTrophies","npCommunicationId","trophyGroupId","headerOverrides","_x4","getTitleTrophyGroups","getUserTitles","accountId","getUserTrophiesEarnedForTitle","_response$error$messa","_response$error","error","message","_x5","getUserTrophyGroupEarningsForTitle","getUserTrophyProfileSummary","USER_BASE_URL","getProfileFromAccountId","getProfileFromUserName","userName","getUserFriendsAccountIds"],"mappings":"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"}