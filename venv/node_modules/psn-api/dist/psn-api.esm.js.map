{"version":3,"file":"psn-api.esm.js","sources":["../src/authenticate/AUTH_BASE_URL.ts","../src/authenticate/exchangeCodeForAccessToken.ts","../src/authenticate/exchangeNpssoForCode.ts","../src/authenticate/exchangeRefreshTokenForAuthTokens.ts","../src/models/trophy-rarity.model.ts","../src/utils/buildRequestUrl.ts","../src/utils/call.ts","../src/search/SEARCH_BASE_URL.ts","../src/search/makeUniversalSearch.ts","../src/trophy/TROPHY_BASE_URL.ts","../src/trophy/title/getTitleTrophies.ts","../src/trophy/title/getTitleTrophyGroups.ts","../src/trophy/user/getUserTitles.ts","../src/trophy/user/getUserTrophiesEarnedForTitle.ts","../src/trophy/user/getUserTrophyGroupEarningsForTitle.ts","../src/trophy/user/getUserTrophyProfileSummary.ts","../src/user/USER_BASE_URL.ts","../src/user/getProfileFromAccountId.ts","../src/user/getProfileFromUserName.ts","../src/user/getUserFriendsAccountIds.ts"],"sourcesContent":["export const AUTH_BASE_URL = \"https://ca.account.sony.com/api/authz/v3/oauth\";\n","import fetch from \"isomorphic-unfetch\";\n\nimport type { AuthTokensResponse } from \"../models\";\nimport { AUTH_BASE_URL } from \"./AUTH_BASE_URL\";\n\n/**\n * @param accessCode Your access code, typically retrieved by using `exchangeNpssoForCode()`.\n * @returns An object containing an access token, refresh token, and expiry times for both.\n */\nexport const exchangeCodeForAccessToken = async (\n  accessCode: string\n): Promise<AuthTokensResponse> => {\n  const requestUrl = `${AUTH_BASE_URL}/token`;\n\n  const res = await fetch(requestUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Authorization:\n        \"Basic MDk1MTUxNTktNzIzNy00MzcwLTliNDAtMzgwNmU2N2MwODkxOnVjUGprYTV0bnRCMktxc1A=\"\n    },\n    body: new URLSearchParams({\n      code: accessCode,\n      redirect_uri: \"com.scee.psxandroid.scecompcall://redirect\",\n      grant_type: \"authorization_code\",\n      token_format: \"jwt\"\n    }).toString()\n  });\n\n  const raw = await res.json();\n\n  return {\n    accessToken: raw.access_token,\n    expiresIn: raw.expires_in,\n    idToken: raw.id_token,\n    refreshToken: raw.refresh_token,\n    refreshTokenExpiresIn: raw.refresh_token_expires_in,\n    scope: raw.scope,\n    tokenType: raw.token_type\n  };\n};\n","import fetch from \"isomorphic-unfetch\";\n\nimport { AUTH_BASE_URL } from \"./AUTH_BASE_URL\";\n\n/**\n *\n * @param npssoToken Your NPSSO token, retrieved from https://ca.account.sony.com/api/v1/ssocookie\n * @returns An access code, which can be exchanged for an access token using `exchangeCodeForAccessToken`.\n * @example\n * ```ts\n * const code = await exchangeNpssoForCode(\"myNpssoToken\");\n *\n * console.log(code) // --> \"v3.XXXXXX\"\n * ```\n */\nexport const exchangeNpssoForCode = async (\n  npssoToken: string\n): Promise<string> => {\n  const queryString = new URLSearchParams({\n    access_type: \"offline\",\n    client_id: \"09515159-7237-4370-9b40-3806e67c0891\",\n    redirect_uri: \"com.scee.psxandroid.scecompcall://redirect\",\n    response_type: \"code\",\n    scope: \"psn:mobile.v2.core psn:clientapp\"\n  }).toString();\n\n  const requestUrl = `${AUTH_BASE_URL}/authorize?${queryString}`;\n\n  // This never returns a 200. As of Oct 10 2021, it seems to return a 302.\n  const { headers: responseHeaders } = await fetch(requestUrl, {\n    headers: {\n      Cookie: `npsso=${npssoToken}`\n    },\n    redirect: \"manual\"\n  });\n\n  // The access code itself is stored in a header on the response.\n  // We'll perform a few validations to ensure it's actually there.\n  if (\n    !responseHeaders.has(\"location\") ||\n    !responseHeaders.get(\"location\")?.includes(\"?code=\")\n  ) {\n    throw new Error(`\n      There was a problem retrieving your PSN access code. Is your NPSSO code valid?\n      To get a new NPSSO code, visit https://ca.account.sony.com/api/v1/ssocookie.\n    `);\n  }\n\n  const redirectLocation = responseHeaders.get(\"location\") as string;\n  const redirectParams = new URLSearchParams(\n    redirectLocation.split(\"redirect/\")[1]\n  );\n\n  return redirectParams.get(\"code\") as string;\n};\n","import fetch from \"isomorphic-unfetch\";\n\nimport type { AuthTokensResponse } from \"../models\";\nimport { AUTH_BASE_URL } from \"./AUTH_BASE_URL\";\n\nexport const exchangeRefreshTokenForAuthTokens = async (\n  refreshToken: string\n): Promise<AuthTokensResponse> => {\n  const requestUrl = `${AUTH_BASE_URL}/token`;\n\n  const res = await fetch(requestUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Authorization:\n        \"Basic MDk1MTUxNTktNzIzNy00MzcwLTliNDAtMzgwNmU2N2MwODkxOnVjUGprYTV0bnRCMktxc1A=\"\n    },\n    body: new URLSearchParams({\n      refresh_token: refreshToken,\n      grant_type: \"refresh_token\",\n      token_format: \"jwt\",\n      scope: \"psn:mobile.v2.core psn:clientapp\"\n    }).toString()\n  });\n\n  const raw = await res.json();\n\n  return {\n    accessToken: raw.access_token,\n    expiresIn: raw.expires_in,\n    idToken: raw.id_token,\n    refreshToken: raw.refresh_token,\n    refreshTokenExpiresIn: raw.refresh_token_expires_in,\n    scope: raw.scope,\n    tokenType: raw.token_type\n  };\n};\n","export enum TrophyRarity {\n  UltraRare,\n  VeryRare,\n  Rare,\n  Common\n}\n","import type { AllCallOptions } from \"../models\";\n\nexport const buildRequestUrl = (\n  baseUrl: string,\n  endpointUrl: string,\n  options: Partial<AllCallOptions> = {},\n  args: Record<string, string | number> = {}\n) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- This is an intentional pick.\n  const { headerOverrides, ...pickedOptions } = options;\n\n  const concatenated = `${baseUrl}/${endpointUrl}`;\n  const withoutDoubleSlashes = concatenated.replace(/([^:]\\/)\\/+/g, \"$1\");\n\n  let withArgs = withoutDoubleSlashes;\n  const queryParamValues: Record<string, string> = {};\n\n  for (const [argKey, argValue] of Object.entries({\n    ...args,\n    ...pickedOptions\n  })) {\n    if (withArgs.includes(`:${argKey}`)) {\n      withArgs = withArgs.replace(`:${argKey}`, String(argValue));\n    } else if (argValue !== undefined) {\n      queryParamValues[argKey] = String(argValue);\n    }\n  }\n\n  const queryString = new URLSearchParams(queryParamValues).toString();\n  return queryString.length > 0 ? `${withArgs}?${queryString}` : withArgs;\n};\n","import fetch from \"isomorphic-unfetch\";\n\nimport type { AuthorizationPayload, CallValidHeaders } from \"../models\";\n\nexport const call = async <T>(\n  config: {\n    url: string;\n    method?: \"GET\" | \"POST\";\n    headers?: CallValidHeaders;\n  },\n  authorization: AuthorizationPayload,\n  bodyPayload?: Record<string, any>\n) => {\n  const response = await fetch(config.url, {\n    method: config?.method ?? \"GET\",\n    headers: {\n      Authorization: `Bearer ${authorization.accessToken}`,\n      \"Content-Type\": \"application/json\",\n      ...config?.headers\n    },\n    body: JSON.stringify(bodyPayload)\n  });\n\n  return (await response.json()) as T;\n};\n","export const SEARCH_BASE_URL = \"https://m.np.playstation.com/api/search\";\n","import type {\n  AuthorizationPayload,\n  SocialAccountResult,\n  UniversalSearchDomains,\n  UniversalSearchResponse\n} from \"../models\";\nimport { buildRequestUrl } from \"../utils/buildRequestUrl\";\nimport { call } from \"../utils/call\";\nimport { SEARCH_BASE_URL } from \"./SEARCH_BASE_URL\";\n\nexport const makeUniversalSearch = async <R extends UniversalSearchDomains>(\n  authorization: AuthorizationPayload,\n  searchTerm: string,\n  domain: R\n) => {\n  const url = buildRequestUrl(SEARCH_BASE_URL, \"/v1/universalSearch\");\n\n  type AssertType<R> = R extends \"SocialAllAccounts\"\n    ? SocialAccountResult\n    : unknown;\n\n  return await call<UniversalSearchResponse<AssertType<typeof domain>>>(\n    { url, method: \"POST\" },\n    authorization,\n    {\n      searchTerm,\n      domainRequests: [\n        {\n          domain\n        }\n      ]\n    }\n  );\n};\n","export const TROPHY_BASE_URL = \"https://m.np.playstation.com/api/trophy\";\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  TitleTrophiesResponse\n} from \"../../models\";\nimport { buildRequestUrl } from \"../../utils/buildRequestUrl\";\nimport { call } from \"../../utils/call\";\nimport { TROPHY_BASE_URL } from \"../TROPHY_BASE_URL\";\n\ntype GetTitleTrophiesOptions = Pick<\n  AllCallOptions,\n  \"headerOverrides\" | \"limit\" | \"npServiceName\" | \"offset\"\n>;\n\n/**\n * A call to this function will retrieve the trophy list of a\n * single - or all - trophy groups for a title. A title can have multiple\n * groups of trophies (a `\"default\"` group which all titles have, and additional\n * groups starting with the name `\"001\"` and incrementing for each additional group). To retrieve\n * trophies from all groups within a title (ie. the full trophy set), then\n * `trophyGroupId` should be set to `\"all\"`.\n *\n * When the title platform is PS3, PS4 or PS Vita you __must__ specify the\n * `npServiceName` parameter as `\"trophy\"`.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeCodeForAccessToken()`.\n * @param npCommunicationId Unique ID of the title.\n * @param trophyGroupId `\"all\"` to return all trophies for the title, otherwise restrict results to a specific trophy group (such as a DLC).\n * @param options.npServiceName `\"trophy\"` for PS3, PS4, or PS Vita platforms. `\"trophy2\"` for the PS5 platform.\n * @param options.limit Limit the number of trophies returned.\n * @param options.offset Return trophy data from this result onwards.\n * @param options.headerOverrides Override the headers in the request to the PSN API, such as to change the language.\n */\nexport const getTitleTrophies = async (\n  authorization: AuthorizationPayload,\n  npCommunicationId: string,\n  trophyGroupId: string,\n  options?: Partial<GetTitleTrophiesOptions>\n): Promise<TitleTrophiesResponse> => {\n  const url = buildRequestUrl(\n    TROPHY_BASE_URL,\n    \"/v1/npCommunicationIds/:npCommunicationId/trophyGroups/:trophyGroupId/trophies\",\n    options,\n    { npCommunicationId, trophyGroupId }\n  );\n\n  return await call<TitleTrophiesResponse>(\n    { url, headers: options?.headerOverrides },\n    authorization\n  );\n};\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  TitleTrophyGroupsResponse\n} from \"../../models\";\nimport { buildRequestUrl } from \"../../utils/buildRequestUrl\";\nimport { call } from \"../../utils/call\";\nimport { TROPHY_BASE_URL } from \"../TROPHY_BASE_URL\";\n\ntype GetTitleTrophyGroupsOptions = Pick<\n  AllCallOptions,\n  \"npServiceName\" | \"headerOverrides\"\n>;\n\n/**\n * A title may have multiple groups of trophies. This is most commonly\n * seen in games which have DLC expansions where additional trophies are added.\n *\n * You can call this function for a specific title - using the\n * unique `npCommunicationId` for the title - and you will receive a\n * summary of all of the trophy groups associated with the title.\n * This also includes a summary of the number of trophies for the\n * title, broken down by group and grade (gold, silver, etc.).\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeCodeForAccessToken()`.\n * @param npCommunicationId The unique ID of the game title you wish to retrieve the trophy groups list for.\n * @param options.npServiceName `\"trophy\"` for PS3, PS4, or PS Vita platforms. `\"trophy2\"` for the PS5 platform.\n * @param options.headerOverrides Override the headers in the request to the PSN API, such as to change the language.\n */\nexport const getTitleTrophyGroups = async (\n  authorization: AuthorizationPayload,\n  npCommunicationId: string,\n  options?: Partial<GetTitleTrophyGroupsOptions>\n): Promise<TitleTrophyGroupsResponse> => {\n  const url = buildRequestUrl(\n    TROPHY_BASE_URL,\n    \"/v1/npCommunicationIds/:npCommunicationId/trophyGroups\",\n    options,\n    { npCommunicationId }\n  );\n\n  return await call<TitleTrophyGroupsResponse>(\n    { url, headers: options?.headerOverrides },\n    authorization\n  );\n};\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  UserTitlesResponse\n} from \"../../models\";\nimport { buildRequestUrl } from \"../../utils/buildRequestUrl\";\nimport { call } from \"../../utils/call\";\nimport { TROPHY_BASE_URL } from \"../TROPHY_BASE_URL\";\n\ntype GetUserTitlesOptions = Pick<\n  AllCallOptions,\n  \"headerOverrides\" | \"limit\" | \"offset\"\n>;\n\n/**\n * A call to this function will retrieve the earned status of trophies for a user\n * from either a single - or all - trophy groups in a title. A title can have\n * multiple groups of trophies (a `\"default\"` group which all titles have, and\n * additional groups starting with a name of `\"001\"` and incrementing for each\n * additional group). To retrieve trophies from all groups within a title\n * (ie. the full trophy set), `trophyGroupId` should be set to `\"all\"`.\n *\n * The numeric `accountId` can be that of any PSN account for which the authenticating\n * account has permissions to view the trophy list. When querying the titles\n * associated with the authenticating account, the numeric `accountId` can be\n * substituted with `\"me\"`.\n *\n * To find a user's `accountId`, the `makeUniversalSearch()` function can be used.\n *\n * Included in the information returned is the titles' unique `npCommunicationId`.\n * This is required to make use of subsequent functions for requesting more specific\n * detail about a title's trophies.\n *\n * The results are presented in order of the `lastUpdatedDateTime` for the title,\n * so the first result will be the title for which a trophy was most recently earned\n * (or synced for the first time in the case of a game with 0% progress).\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeCodeForAccessToken()`.\n * @param accountId The account whose trophy list is being accessed. Use `\"me\"` for the authenticating account.\n * @param options.limit Limit the number of titles returned.\n * @param options.offset Return title data from this result onwards.\n * @param options.headerOverrides Override the headers in the request to the PSN API, such as to change the language.\n */\nexport const getUserTitles = async (\n  authorization: AuthorizationPayload,\n  accountId: string,\n  options?: Partial<GetUserTitlesOptions>\n): Promise<UserTitlesResponse> => {\n  const url = buildRequestUrl(\n    TROPHY_BASE_URL,\n    \"/v1/users/:accountId/trophyTitles\",\n    options,\n    { accountId }\n  );\n\n  return await call<UserTitlesResponse>(\n    { url, headers: options?.headerOverrides },\n    authorization\n  );\n};\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  UserTrophiesEarnedForTitleResponse\n} from \"../../models\";\nimport { buildRequestUrl } from \"../../utils/buildRequestUrl\";\nimport { call } from \"../../utils/call\";\nimport { TROPHY_BASE_URL } from \"../TROPHY_BASE_URL\";\n\ntype GetUserTrophiesEarnedForTitleOptions = Pick<\n  AllCallOptions,\n  \"offset\" | \"npServiceName\" | \"limit\" | \"headerOverrides\"\n>;\n\n/**\n * A call to this function will retrieve the earned status of trophies for a user\n * from either a single - or all - trophy groups in a title. A title can have\n * multiple groups of trophies (a `\"default\"` group which all titles have, and\n * additional groups starting with a name of `\"001\"` and incrementing for each\n * additional group). To retrieve trophies from all groups within a title\n * (ie. the full trophy set), then `trophyGroupId` should be set to `\"all\"`.\n *\n * The numeric `accountId` can be that of any PSN account for which the\n * authenticating account has permissions to view the trophy list.\n * When querying the titles associated with the authenticating account, the\n * numeric `accountId` can be substituted with `\"me\"`.\n *\n * To find a user's `accountId`, the `makeUniversalSearch()` function can be used.\n *\n * This function returns the earned status of the\n * trophy only and no additional descriptive metadata (ie. trophy name,\n * trophy description). Use `getTitleTrophies()` to obtain this information.\n *\n * When the title platform is PS3, PS4, or PS Vita, you __must__ specify the\n * `npServiceName` option as `\"trophy\"`.\n *\n * If you attempt to query a title which the user does not have associated\n * with their account (ie. the title has not been launched and allowed to\n * sync at least once) then a Resource Not Found error will be thrown.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeCodeForAccessToken()`.\n * @param accountId The account whose trophy list is being accessed. Use `\"me\"` for the authenticating account.\n * @param npCommunicationId Unique ID of the title.\n * @param trophyGroupId `\"all\"` to return all trophies for the title, otherwise restrict results to a specific trophy group (such as a DLC).\n * @param options.npServiceName `\"trophy\"` for PS3, PS4, or PS Vita platforms. `\"trophy2\"` for the PS5 platform.\n * @param options.limit Limit the number of trophies returned.\n * @param options.offset Return trophy data from this result onwards.\n * @param options.headerOverrides Override the headers in the request to the PSN API, such as to change the language.\n */\nexport const getUserTrophiesEarnedForTitle = async (\n  authorization: AuthorizationPayload,\n  accountId: string,\n  npCommunicationId: string,\n  trophyGroupId: string,\n  options?: Partial<GetUserTrophiesEarnedForTitleOptions>\n): Promise<UserTrophiesEarnedForTitleResponse> => {\n  const url = buildRequestUrl(\n    TROPHY_BASE_URL,\n    \"/v1/users/:accountId/npCommunicationIds/:npCommunicationId/trophyGroups/:trophyGroupId/trophies\",\n    options,\n    { accountId, npCommunicationId, trophyGroupId }\n  );\n\n  const response = await call<UserTrophiesEarnedForTitleResponse>(\n    { url, headers: options?.headerOverrides },\n    authorization\n  );\n\n  if ((response as any)?.error) {\n    throw new Error((response as any)?.error?.message ?? \"Unexpected Error\");\n  }\n\n  return response;\n};\n","import type {\n  AuthorizationPayload,\n  CallValidHeaders,\n  UserTrophyGroupEarningsForTitleResponse\n} from \"../../models\";\nimport { buildRequestUrl } from \"../../utils/buildRequestUrl\";\nimport { call } from \"../../utils/call\";\nimport { TROPHY_BASE_URL } from \"../TROPHY_BASE_URL\";\n\ninterface GetUserTrophyGroupEarningsForTitleOptions {\n  /**\n   * Not required unless the platform is PS3, PS4, or PS Vita.\n   * If one of these platforms, the value __must__ be `\"trophy\"`.\n   *\n   * `\"trophy\"` for PS3, PS4, or PS Vita platforms.\n   * `\"trophy2\"` for the PS5 platform.\n   */\n  npServiceName: \"trophy\" | \"trophy2\";\n\n  /*\n   * Override the headers in the request to the PSN API,\n   * such as to change the language.\n   */\n  headerOverrides: CallValidHeaders;\n}\n\n/**\n * A request to this endpoint function will retrieve a summary of the trophies earned for\n * a user broken down by trophy group within a title. A title can have\n * multiple groups of trophies (a `\"default\"` group which all titles have,\n * and additional groups beginning with the name `\"001\"` and incrementing for\n * each additional group).\n *\n * The numeric `accountId` can be that of any PSN account for which the\n * authenticating account has permissions to view the trophy list.\n * When querying the titles associated with the authenticating account, the\n * numeric `accountId` can be substituted with `\"me\"`.\n *\n * To find a user's `accountId`, the `makeUniversalSearch()` function can be used.\n *\n * This function calls an endpoint that returns the earned status of the\n * trophy only and no additional descriptive metadata (ie. trophy name,\n * trophy description). Use `getTitleTrophies()` to obtain this information.\n *\n *  When the title platform is PS3, PS4 or PS Vita you __must__ specify the\n * `npServiceName` option as `\"trophy\"`.\n *\n * If you attempt to query a title which the user does not have associated\n * with their account (ie. the title has not been launched and allowed to\n * sync at least once) then a Resource Not Found error will be thrown.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeCodeForAccessToken()`.\n * @param accountId The account whose trophy list is being accessed. Use `\"me\"` for the authenticating account.\n * @param npCommunicationId Unique ID of the title.\n * @param options.npServiceName `\"trophy\"` for PS3, PS4, or PS Vita platforms. `\"trophy2\"` for the PS5 platform.\n * @param options.headerOverrides Override the headers in the request to the PSN API, such as to change the language.\n */\nexport const getUserTrophyGroupEarningsForTitle = async (\n  authorization: AuthorizationPayload,\n  accountId: string,\n  npCommunicationId: string,\n  options?: Partial<GetUserTrophyGroupEarningsForTitleOptions>\n): Promise<UserTrophyGroupEarningsForTitleResponse> => {\n  const url = buildRequestUrl(\n    TROPHY_BASE_URL,\n    \"/v1/users/:accountId/npCommunicationIds/:npCommunicationId/trophyGroups\",\n    options,\n    { accountId, npCommunicationId }\n  );\n\n  const response = await call<UserTrophyGroupEarningsForTitleResponse>(\n    { url, headers: options?.headerOverrides },\n    authorization\n  );\n\n  if ((response as any)?.error) {\n    throw new Error((response as any)?.error?.message ?? \"Unexpected Error\");\n  }\n\n  return response;\n};\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  UserTrophyProfileSummaryResponse\n} from \"../../models\";\nimport { buildRequestUrl } from \"../../utils/buildRequestUrl\";\nimport { call } from \"../../utils/call\";\nimport { TROPHY_BASE_URL } from \"../TROPHY_BASE_URL\";\n\ntype GetUserTrophyProfileSummaryOptions = Pick<\n  AllCallOptions,\n  \"headerOverrides\"\n>;\n\n/**\n * A call to this function will retrieve an overall summary of the number of\n * trophies earned for a user broken down by grade, as well as their current\n * overall trophy level, progress towards the next level, and which tier their\n * current level falls in to. The tiers are based on the [level changes introduced in 2020](https://andshrew.github.io/PlayStation-Trophies/images/psn-trophy-tiers.png).\n *\n * The numeric `accountId` can be that of any PSN account for which the\n * authenticating account has permissions to view the trophy list.\n * When querying the titles associated with the authenticating account, the\n * numeric `accountId` can be substituted with `\"me\"`.\n *\n * To find a user's `accountId`, the `makeUniversalSearch()` function can be used.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeCodeForAccessToken()`.\n * @param accountId The account whose trophy list is being accessed. Use `\"me\"` for the authenticating account.\n * @param options.headerOverrides Override the headers in the request to the PSN API, such as to change the language.\n */\nexport const getUserTrophyProfileSummary = async (\n  authorization: AuthorizationPayload,\n  accountId: string,\n  options?: Partial<GetUserTrophyProfileSummaryOptions>\n): Promise<UserTrophyProfileSummaryResponse> => {\n  const url = buildRequestUrl(\n    TROPHY_BASE_URL,\n    \"/v1/users/:accountId/trophySummary\",\n    options,\n    { accountId }\n  );\n\n  return await call<UserTrophyProfileSummaryResponse>(\n    { url, headers: options?.headerOverrides },\n    authorization\n  );\n};\n","export const USER_BASE_URL =\n  \"https://m.np.playstation.com/api/userProfile/v1/internal/users\";\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  ProfileFromAccountIdResponse\n} from \"../models\";\nimport { buildRequestUrl } from \"../utils/buildRequestUrl\";\nimport { call } from \"../utils/call\";\nimport { USER_BASE_URL } from \"./USER_BASE_URL\";\n\ntype GetProfileFromAccountIdOptions = Pick<AllCallOptions, \"headerOverrides\">;\n\n/**\n * A call to this function will retrieve some profile information of the accountId being requested.\n * If the account's profile cannot be found (either due to non-existence or privacy settings),\n * an error will be thrown.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeCodeForAccessToken()`.\n * @param accountId The accountId for the user you wish to retrieve a profile for.\n */\nexport const getProfileFromAccountId = async (\n  authorization: AuthorizationPayload,\n  accountId: string,\n  options?: GetProfileFromAccountIdOptions\n): Promise<ProfileFromAccountIdResponse> => {\n  const url = buildRequestUrl(USER_BASE_URL, \"/:accountId/profiles\", options, {\n    accountId\n  });\n  const response = await call<ProfileFromAccountIdResponse>(\n    { url },\n    authorization\n  );\n\n  if ((response as any)?.error) {\n    throw new Error((response as any)?.error?.message ?? \"Unexpected Error\");\n  }\n\n  return response;\n};\n","import type {\n  AuthorizationPayload,\n  ProfileFromUserNameResponse\n} from \"../models\";\nimport { call } from \"../utils/call\";\n\n/**\n * A call to this function will retrieve the profile of the username being requested.\n * If the user cannot be found (either due to non-existence or privacy settings),\n * an error will be thrown.\n *\n * This is a legacy API endpoint function. If you are just trying to get a user's\n * account ID, [`makeUniversalSearch()`](https://psn-api.achievements.app/api-docs/universal-search#makeuniversalsearch)\n * is recommended instead. This endpoint is here because it can return interesting\n * presence information when the user is playing on a legacy console such as a PS3.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeCodeForAccessToken()`.\n * @param userName The username for the user you wish to retrieve a profile for.\n */\nexport const getProfileFromUserName = async (\n  authorization: AuthorizationPayload,\n  userName: string\n): Promise<ProfileFromUserNameResponse> => {\n  const url = `https://us-prof.np.community.playstation.net/userProfile/v1/users/${userName}/profile2?fields=npId,onlineId,accountId,avatarUrls,plus,aboutMe,languagesUsed,trophySummary(@default,level,progress,earnedTrophies),isOfficiallyVerified,personalDetail(@default,profilePictureUrls),personalDetailSharing,personalDetailSharingRequestMessageFlag,primaryOnlineStatus,presences(@default,@titleInfo,platform,lastOnlineDate,hasBroadcastData),requestMessageFlag,blocking,friendRelation,following,consoleAvailability`;\n\n  const response = await call<ProfileFromUserNameResponse>(\n    { url },\n    authorization\n  );\n\n  if ((response as any)?.error) {\n    throw new Error((response as any)?.error?.message ?? \"Unexpected Error\");\n  }\n\n  return response;\n};\n","import type {\n  AllCallOptions,\n  AuthorizationPayload,\n  GetUserFriendsAccountIdsResponse\n} from \"../models\";\nimport { buildRequestUrl } from \"../utils/buildRequestUrl\";\nimport { call } from \"../utils/call\";\nimport { USER_BASE_URL } from \"./USER_BASE_URL\";\n\ntype GetUserFriendsAccountIdsOptions = Pick<AllCallOptions, \"limit\" | \"offset\">;\n\n/**\n * A call to this function will retrieve the list of friended `accountId` values\n * associated with the given `accountId` parameter. If the user cannot be found\n * (either due to non-existence or privacy settings), an error will be thrown.\n *\n *  To find a user's `accountId`, the `makeUniversalSearch()` function can be used.\n *\n * @param authorization An object containing your access token, typically retrieved with `exchangeCodeForAccessToken()`.\n * @param accountId The account whose trophy list is being accessed. Use `\"me\"` for the authenticating account.\n */\nexport const getUserFriendsAccountIds = async (\n  authorization: AuthorizationPayload,\n  accountId: string,\n  options?: Partial<GetUserFriendsAccountIdsOptions>\n): Promise<GetUserFriendsAccountIdsResponse> => {\n  const url = buildRequestUrl(USER_BASE_URL, \"/:accountId/friends\", options, {\n    accountId\n  });\n\n  const response = await call<GetUserFriendsAccountIdsResponse>(\n    { url },\n    authorization\n  );\n\n  // If you are unable to access the user's friends list, a\n  // \"Not permitted by access control\" error will be thrown.\n  if ((response as any)?.error) {\n    throw new Error((response as any)?.error?.message ?? \"Unexpected Error\");\n  }\n\n  return response;\n};\n"],"names":["AUTH_BASE_URL","exchangeCodeForAccessToken","accessCode","requestUrl","fetch","method","headers","Authorization","body","URLSearchParams","code","redirect_uri","grant_type","token_format","toString","res","json","raw","accessToken","access_token","expiresIn","expires_in","idToken","id_token","refreshToken","refresh_token","refreshTokenExpiresIn","refresh_token_expires_in","scope","tokenType","token_type","exchangeNpssoForCode","npssoToken","queryString","access_type","client_id","response_type","Cookie","redirect","responseHeaders","has","get","includes","Error","redirectLocation","redirectParams","split","exchangeRefreshTokenForAuthTokens","TrophyRarity","buildRequestUrl","baseUrl","endpointUrl","options","args","headerOverrides","pickedOptions","concatenated","withoutDoubleSlashes","replace","withArgs","queryParamValues","Object","entries","argKey","argValue","String","undefined","length","call","config","authorization","bodyPayload","url","JSON","stringify","response","SEARCH_BASE_URL","makeUniversalSearch","searchTerm","domain","domainRequests","TROPHY_BASE_URL","getTitleTrophies","npCommunicationId","trophyGroupId","getTitleTrophyGroups","getUserTitles","accountId","getUserTrophiesEarnedForTitle","error","message","getUserTrophyGroupEarningsForTitle","getUserTrophyProfileSummary","USER_BASE_URL","getProfileFromAccountId","getProfileFromUserName","userName","getUserFriendsAccountIds"],"mappings":"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"}